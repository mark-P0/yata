@import url('./utilities.css');
@import url('./scrollbars.css');

#app {
  max-width: 1440px;
  display: grid;
}
main {
  padding: 5rem 1rem;
}
nav {
  display: flex;
}
@media screen and (min-width: 0px) {
  #app {
    grid-template-rows: min-content 1fr;
    grid-template-columns: initial;
  }
  nav img {
    /* Fixed size roughly the same as Bootstrap's `.navbar-toggler` */
    width: 3.5rem;
    height: auto;
    padding: var(--bs-navbar-toggler-padding-y)
      var(--bs-navbar-toggler-padding-x) !important;
  }
  nav .navbar-collapse > * {
    padding-top: 1.5rem;
  }
  nav > *:last-child {
    display: none !important;
  }
}
@media screen and (min-width: 576px) {
  #app {
    grid-template-rows: initial;
    grid-template-columns: 1fr 4fr;
  }
  nav {
    flex-direction: column-reverse;
  }
  nav img {
    /* Mostly from Bootstrap's `.img-fluid` class */
    width: 100%;
    height: auto;
    padding: 0 !important;
  }
  nav .navbar-collapse > * {
    padding-top: initial;
  }
  nav > *:last-child {
    display: flex !important;
  }
}
@media screen and (min-width: 992px) {
  nav {
    margin: 1rem;
    border-radius: var(--bs-border-radius);
  }
}
nav label.text-truncate {
  width: 0;
  max-width: 100%;
}

/*  Workaround to absolutely positioned element scrolling with the parent container
 *  Padding of the absolute-position element gives it a size,
 *  within which a fixed-position element can be centered.
 *  Not entirely sure how it works...
 *  https://stackoverflow.com/a/40459794
 */
#floating-button {
  --size: 3rem;
  padding: var(--size);
}
#floating-button button {
  width: var(--size);
  height: var(--size);
}

main .d-grid {
  display: grid;
  grid-template-columns: repeat(var(--col-ct), 1fr);
}
@media screen and (min-width: 0px) {
  main .d-grid {
    --col-ct: 1;
  }
}
@media screen and (min-width: 576px) {
  main .d-grid {
    --col-ct: 2;
  }
}
@media screen and (min-width: 992px) {
  main .d-grid {
    --col-ct: 3;
  }
}

.priority {
  /*  Color variable set via JS
   *  `Element.style.setProperty('--var', value)`
   *  `Element.setAttribute('style', '--var: value;')`
   *  https://css-tricks.com/updating-a-css-variable-with-javascript/
   */
  --priority-color: hsl(var(--hue) 50% 50%);
}
.priority.btn {
  /* Taken from Bootstrap's `btn-outline-_____` class */
  --bs-btn-color: var(--priority-color);
  --bs-btn-border-color: var(--priority-color);
  --bs-btn-hover-color: #fff;
  --bs-btn-hover-bg: var(--priority-color);
  --bs-btn-hover-border-color: var(--priority-color);
  --bs-btn-focus-shadow-rgb: 13, 110, 253;
  --bs-btn-active-color: #fff;
  --bs-btn-active-bg: var(--priority-color);
  --bs-btn-active-border-color: var(--priority-color);
  --bs-btn-active-shadow: inset 0 3px 5px rgba(0, 0, 0, 0.125);
  --bs-btn-disabled-color: var(--priority-color);
  --bs-btn-disabled-bg: transparent;
  --bs-btn-disabled-border-color: var(--priority-color);
  --bs-gradient: none;
}
.priority.card {
  border: none;
  border-left: var(--bs-card-border-radius) solid var(--priority-color);
}
